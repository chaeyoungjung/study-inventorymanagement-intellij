<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.overc1ock.mapper.StockManagementMapper">

	<sql id = "criteria">
		<if test="startDate != null and endDate != null">
	    	AND between date(#{startDate}) and date(endDate)+1
		</if>
		<if test="word != null">
	    	AND product_name like #{word}
		</if>
	</sql>

	<select id="getOutboundList" resultType="com.overc1ock.domain.ProductionPlanVO">
		select product_name,item_code,item_name,production_date,consumption,(ifnull(eq,0)+ifnull(iq,0)-ifnull(oq,0)) stock_amount,ifnull(goq,0) total_amount,iup_code 
		from (select * from item_use_plan join products_production_plan using(ppp_code)) p 
		join item using(item_code) 
        left outer join (SELECT item_code, sum(inbound_quantity) iq FROM inbound group by item_code) i using(item_code)
        left outer join (SELECT item_code, sum(outbound_quantity) oq FROM outbound group by item_code) o using(item_code)
        left outer join (SELECT item_code, sum(es_quantity) eq FROM existing_stock group by item_code) e using(item_code)
        left outer join (SELECT iup_code, sum(outbound_quantity) goq FROM outbound group by iup_code) go using(iup_code)
        where consumption != ifnull(goq,0)
	</select>
	
	<select id="getOutboundListWithCriteria" resultType="com.overc1ock.domain.ProductionPlanVO">
		select product_name,item_code,item_name,production_date,consumption,(ifnull(eq,0)+ifnull(iq,0)-ifnull(oq,0)) stock_amount,ifnull(goq,0) total_amount,iup_code 
		from (select * from item_use_plan join products_production_plan using(ppp_code)) p 
		join item using(item_code) 
        left outer join (SELECT item_code, sum(inbound_quantity) iq FROM inbound group by item_code) i using(item_code)
        left outer join (SELECT item_code, sum(outbound_quantity) oq FROM outbound group by item_code) o using(item_code)
        left outer join (SELECT item_code, sum(es_quantity) eq FROM existing_stock group by item_code) e using(item_code)
        left outer join (SELECT iup_code, sum(outbound_quantity) goq FROM outbound group by iup_code) go using(iup_code)
        where consumption != ifnull(goq,0)
			<if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
		    	AND production_date between date(#{startDate}) and date(#{endDate})+1
			</if>
			<if test="word != null and word != ''">
		    	AND product_name = #{word}
			</if>
    </select>
	
	<select id="getProductNameList" resultType="com.overc1ock.domain.ProductionPlanVO">
		SELECT product_name FROM mesdb.products_production_plan
    </select>
    
    <insert id="insertOutbound" parameterType="java.util.List">
    	<foreach collection="list" item="vo" separator=";">
    	insert into outbound(outbound_quantity,shipping_date,item_code,iup_code)
    		values(#{vo.amount},#{vo.date},#{vo.item_code},#{vo.iup_code})
    	</foreach>
    </insert>
    
    <select id="chartItemCode" resultType="com.overc1ock.domain.ReportVO">
        <![CDATA[
		    select item_code labelsarr, (supply_price*(ifnull(eq,0)+ifnull(iq,0)-ifnull(oq,0))) valuesarr 
			from item_use_plan left join procurement_plan using(iup_code)
			left join purchase_order using(po_code)
			left join contract using(po_code)
			left outer join (SELECT item_code, sum(inbound_quantity) iq FROM inbound group by item_code) i using(item_code)
			left outer join (SELECT item_code, sum(outbound_quantity) oq FROM outbound group by item_code) o using(item_code)
			left outer join (SELECT item_code, sum(es_quantity) eq FROM existing_stock group by item_code) e using(item_code)
			where (supply_price*(ifnull(eq,0)+ifnull(iq,0)-ifnull(oq,0))) > 0
    	]]>
    </select>    
    
    <select id="chartItemName" resultType="com.overc1ock.domain.ReportVO">
    	<![CDATA[
			select item_name labelsarr, sum((supply_price*(ifnull(eq,0)+ifnull(iq,0)-ifnull(oq,0)))) valuesarr 
			from item
			left join item_use_plan using(item_code)
			left join procurement_plan using(iup_code)
			left join purchase_order using(po_code)
			left join contract using(po_code)
			left outer join (SELECT item_code, sum(inbound_quantity) iq FROM inbound group by item_code) i using(item_code)
			left outer join (SELECT item_code, sum(outbound_quantity) oq FROM outbound group by item_code) o using(item_code)
			left outer join (SELECT item_code, sum(es_quantity) eq FROM existing_stock group by item_code) e using(item_code)
			where (supply_price*(ifnull(eq,0)+ifnull(iq,0)-ifnull(oq,0))) > 0
			group by item_name
		]]>
    </select>
    
    <select id="chartDate" resultType="com.overc1ock.domain.ReportVO">
        	<![CDATA[
			    select  mylabel, sum(myvalue) myvalue
				from (select t1.일자 mylabel, t1.item_code,입고량, 출고량,sum(ifnull(입고량,0)-ifnull(출고량,0)) over (order by t1.일자) as 재고량, (ifnull(c.supply_price,0)*sum(ifnull(입고량,0)-ifnull(출고량,0)) over (partition by item_code order by t1.일자))  myvalue
				from (select t1.일자 as 일자, t1.item_code as item_code, 입고량
						from (select *
							from (WITH RECURSIVE CTE  AS (
															  SELECT DATE_FORMAT("2022-01-01", '%Y-%m-%d') AS DT FROM DUAL
															  UNION ALL
															  SELECT DATE_ADD(DT, INTERVAL 1 DAY) FROM CTE
															  WHERE DT < last_day(date(#{startDate}))) SELECT DT AS 일자 FROM CTE) t1,
									(select distinct(item_code) from inbound union select distinct(item_code) from existing_stock) t2) t1 
					 left join 
						 (select item_code,DATE_FORMAT(es_date, '%Y-%m-%d') 일자, es_quantity 입고량 from existing_stock 
						  union all
						  select item_code, DATE_FORMAT(arrival_date, '%Y-%m-%d') 일자,  sum(inbound_quantity) 입고량 from inbound
						  group by item_code ,DATE_FORMAT(arrival_date, '%Y-%m-%d')) t2
					  on t1.일자=t2.일자 and t1.item_code=t2.item_code) t1 
					  left join ( select item_code, DATE_FORMAT(shipping_date, '%Y-%m-%d') 일자,  sum(outbound_quantity) 출고량 from outbound
									group by item_code ,DATE_FORMAT(shipping_date, '%Y-%m-%d')) t2 
					  on t1.일자=t2.일자 and t1.item_code=t2.item_code
					  left join (select item_code, max(supply_price) supply_price from contract group by item_code) c on t1.item_code=c.item_code) t1
			          where mylabel >= date(#{startDate})
			          group by mylabel
          		]]>
    </select>
    
    <select id = "getStockCalculationList" resultType="com.overc1ock.domain.StockCalculationVO">
    	select item_code, item_name, standard, material, subcontractor_name, ifnull(iq,0)+ifnull(eq,0) inbound_amount, ifnull(oq,0) outbound_amount, (ifnull(iq,0)+ifnull(eq,0)-ifnull(oq,0))stock_amount,supply_price
			from(select contract_code, sum(inbound_quantity) iq 
					from item join inbound using(item_code) 
					join existing_stock using(item_code) 
					join contract using(item_code) 
				group by contract_code) i
			join (select contract_code, sum(outbound_quantity) oq 
					from item join outbound using(item_code) 
					join contract using(item_code) 
					group by contract_code) o using(contract_code)
			join (select contract_code, sum(es_quantity) eq
					from item join existing_stock using(item_code) 
					join contract using(item_code)
					group by contract_code) e using(contract_code)
			join contract using(contract_code)
			join item using(item_code)
			join subcontractor using(subcontractor_name)
    </select>
    
    
</mapper>