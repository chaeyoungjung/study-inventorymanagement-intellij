<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.overc1ock.mapper.StockManagementMapper">

<!-- 입고처리(마감) -->
    
    <select id="getOrderItemList" resultType="com.overc1ock.domain.ProcurementPlanVO">
		 select purchase_order.po_code po_code, t1.item_code, item_name, consumption amount,pp_status,procurement_date,subcontractor_name 
		supplier from contract_has_purchase_order join contract using(contract_code) join subcontractor using(subcontractor_name)
		 join (select * from item_use_plan join item using(item_code) join products_production_plan using(ppp_code) join procurement_plan using(iup_code)) t1 on t1.po_code=contract_has_purchase_order.po_code and t1.item_code=contract.item_code
		 join purchase_order on purchase_order.po_code=contract_has_purchase_order.po_code
		 where close_status=0
		<if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
			and procurement_date between DATE(#{startDate}) and DATE(#{endDate})+1 
		</if>
		<if test="word != null and word != ''">
	    	AND subcontractor_name like concat('%',#{word},'%')
		</if>
		 order by pp_status, procurement_date, item_code
    </select>
    
    <select id="checkOrderList" resultType="Integer">
   		select po_code from purchase_order join contract_has_purchase_order using(po_code) join contract using(contract_code)
		join (select po_code,if(c1=c2,1,0) save from (select po_code, count(*) c1 from procurement_plan group by po_code) t1
		left join (select po_code, count(pp_status) c2 from procurement_plan where pp_status =1 group by po_code) t2 using(po_code)) t1 using(po_code)
		where close_status=0 and save = 1
		group by po_code, subcontractor_name,po_date, save order by save, po_date
    </select>
    
    <insert id="insertInbound" parameterType="com.overc1ock.domain.InBoundVO">
    	insert into inbound(inbound_quantity,arrival_date,item_code,po_code)
    		values(#{amount},#{date},#{item_code},#{po_code})
    </insert>
    
    <update id="updateProcurementPlanStatus" parameterType="com.overc1ock.domain.InBoundVO">
		update procurement_plan set pp_status = 1 where po_code = (select t1.po_code from (select 
		* from procurement_plan join item_use_plan using(iup_code) join purchase_order using(po_code)) 
		t1 left join inbound t2 on t1.po_code=t2.po_code and t1.item_code=t2.item_code where consumption 
		= inbound_quantity and t1.item_code = #{item_code} and pp_status = 0) and iup_code=(select iup_code from (select * from procurement_plan join item_use_plan using(iup_code) join purchase_order using(po_code)) t1
				join inbound t2 on t1.po_code=t2.po_code and t1.item_code=t2.item_code
				where consumption = inbound_quantity and t1.item_code=#{item_code} and pp_status = 0)
    </update>
    
    <select id="getPurchaseOrderAtInbound" resultType="com.overc1ock.domain.ProcurementPlanVO">
	    select po_code,t1.item_code,item_name,consumption amount,procurement_date,subcontractor_name supplier from (select * from procurement_plan
		join item_use_plan using(iup_code) join item using(item_code)) t1
		join contract_has_purchase_order using(po_Code) join contract on t1.item_code=contract.item_code and contract_has_purchase_order.contract_code = contract.contract_code join subcontractor using(subcontractor_name)
		where po_code = #{po_code}
    </select>
    
    
 <!-- 거래명세서 발행 -->
 
 	<select id="getPurchaseOrderListAtTransactionStatement" resultType="com.overc1ock.domain.PurchaseOrderVO">
        select po_code, subcontractor_name supplier,po_date,ifnull(ts_save,-1) save from purchase_order
       left join transaction_statement using(po_code) join contract_has_purchase_order using(po_code) join contract using(contract_code)
		where po_code in (select po_code from purchase_order join contract_has_purchase_order using(po_code) join contract using(contract_code)
		join (select po_code,if(c1=c2,1,0) save from (select po_code, count(*) c1 from procurement_plan group by po_code) t1
		left join (select po_code, count(pp_status) c2 from procurement_plan where pp_status =1 group by po_code) t2 using(po_code)) t1 using(po_code)
		where close_status=0 and save = 1
		group by po_code order by save, po_date)
		
       	<if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
			AND po_date between DATE(#{startDate}) and DATE(#{endDate})+1 
		</if>
		<if test="(word != null and word != '')">
	    	AND subcontractor_name like concat('%',#{word},'%')
		</if>
		
       group by po_code, subcontractor_name,po_date, save
		order by save, po_date
 	</select>
 	
 	<select id="newGetPurchaseOrderListAtTransactionStatement" resultType="com.overc1ock.domain.PurchaseOrderVO">
       select t1.po_code,t1.item_code,item_name,subcontractor_name supplier,po_date,ifnull(ts_save,-1) save from purchase_order
       left join transaction_statement using(po_code) join contract_has_purchase_order using(po_code) join contract using(contract_code)
       join (select * from procurement_plan join item_use_plan using(iup_code) join item using(item_code)) t1 on purchase_order.po_code=t1.po_code and contract.item_code=t1.item_code
		where purchase_order.po_code in (select po_code from purchase_order join contract_has_purchase_order using(po_code) join contract using(contract_code)
		join (select po_code,if(c1=c2,1,0) save from (select po_code, count(*) c1 from procurement_plan group by po_code) t1
		left join (select po_code, count(pp_status) c2 from procurement_plan where pp_status =1 group by po_code) t2 using(po_code)) t1 using(po_code)
		where close_status=0 and save = 1
		group by po_code order by save, po_date)
		
       	<if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
			AND po_date between DATE(#{startDate}) and DATE(#{endDate})+1 
		</if>
		<if test="(word != null and word != '')">
	    	AND subcontractor_name like concat('%',#{word},'%')
		</if>
		
		order by save, po_date
 	</select>
 	
 	<select id="getTransactionStatement" resultType="com.overc1ock.domain.TransactionStatementVO">
       select item_name,consumption amount,supply_price price,subcontractor_name,subcontractor_address,subcontractor_tel,subcontractor_person,subcontractor_email,acceptor,deal_date from (select * from (select item_code, subcontractor_name,supply_price,po_code from purchase_order 
       join contract_has_purchase_order using(po_code) join contract using(contract_code) where po_code=#{po_code})t1
       join subcontractor using(subcontractor_name)) t1
       join (select item_code, item_name, consumption from purchase_order 
       join procurement_plan using(po_code) join item_use_plan using(iup_code) join item using(item_code) 
       where po_code=#{po_code}) t2 using(item_code)
       left join transaction_statement using(po_code)
 	</select>
 	
 	<insert id="insertTransactionStatement">
 	insert into transaction_statement(acceptor,deal_date,po_code) values("가짜","2023-01-01",#{po_code});

 	</insert>
 	


<!-- 출고처리 -->
	
	<select id="getOutboundListWithCriteria" resultType="com.overc1ock.domain.ProductionPlanVO">
	<![CDATA[
		select product_name,item_code,item_name,production_date,consumption,(ifnull(iq,0)-ifnull(oq,0)) stock_amount,ifnull(goq,0) total_amount,iup_code 
		from (select * from item_use_plan join products_production_plan using(ppp_code)) p 
		join item using(item_code) 
        left outer join (SELECT item_code, sum(inbound_quantity) iq FROM inbound group by item_code) i using(item_code)
        left outer join (SELECT item_code, sum(outbound_quantity) oq FROM outbound group by item_code) o using(item_code)
        left outer join (SELECT iup_code, sum(outbound_quantity) goq FROM outbound group by iup_code) go using(iup_code)
        where consumption > ifnull(goq,0)
        ]]>
			<if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
		    	AND production_date between date(#{startDate}) and date(#{endDate})+1
			</if>
			<if test="word != null and word != ''">
		    	AND product_name like concat('%',#{word},'%')
			</if>
		order by production_date
    </select>
	
	
	<select id="getProductNameList" resultType="com.overc1ock.domain.ProductionPlanVO">
		SELECT product_name FROM products_production_plan group by product_name order by product_name
    </select>
    
    
    <insert id="insertOutbound" parameterType="java.util.List">
    	<foreach collection="list" item="vo" separator=";">
    	insert into outbound(outbound_quantity,shipping_date,item_code,iup_code)
    		values(#{vo.amount},#{vo.date},#{vo.item_code},#{vo.iup_code})
    	</foreach>
    </insert>
    


<!-- 재고산출 -->
    
    <select id = "getStockCalculationList" resultType="com.overc1ock.domain.StockCalculationVO">
    	<![CDATA[
select 일자, item_code,item_name,standard,material,mc_name,sc_name, inbound_amount, outbound_amount,stock_amount,ifnull((입고총액-출고총액)/stock_amount,0) stock_price
from (select 일자, t1.item_code item_code,item_name,standard,material,mc_name,sc_name, sum(ifnull(입고량,0)) over(partition by item_code order by 일자) inbound_amount,sum(ifnull(출고량,0)) over(partition by item_code order by 일자) outbound_amount,재고량 stock_amount,sum(ifnull(입고단가*입고량,0)) over(partition by item_code order by 일자) 입고총액, sum(ifnull(출고단가*출고량,0)) over(partition by item_code order by 일자) 출고총액
from (select t1.일자, t1.item_code,입고량, 입고단가, 출고량,출고단가, sum(ifnull(입고량,0)-ifnull(출고량,0)) over (partition by item_code order by 일자) as 재고량 from (select t1.일자 as 일자, t1.item_code as item_code, sum(입고량) 입고량, 입고단가 from (select *
	from (WITH RECURSIVE CTE  AS (
      SELECT DATE_FORMAT('20230101', '%Y-%m-%d') AS DT FROM DUAL
      UNION ALL
      SELECT DATE_ADD(DT, INTERVAL 1 DAY) FROM CTE
      WHERE DT < DATE_FORMAT(#{startDate}, '%Y-%m-%d')) SELECT DT AS 일자 FROM CTE) t1,
      (select distinct(item_code) from inbound) t2) t1
      left join (select inbound.item_code, DATE_FORMAT(arrival_date, '%Y-%m-%d') 일자, sum(inbound_quantity) 입고량, supply_price 입고단가 from inbound join contract_has_purchase_order using(po_code) join contract on contract_has_purchase_order.contract_code=contract.contract_code and contract.item_code=inbound.item_code
		group by item_code ,DATE_FORMAT(arrival_date, '%Y-%m-%d'),입고단가) t2 on t1.일자=t2.일자 and t1.item_code=t2.item_code group by item_code,일자,입고단가) t1
      left join (select outbound.item_code, DATE_FORMAT(shipping_date, '%Y-%m-%d') 일자, sum(outbound_quantity) 출고량, supply_price 출고단가 from outbound join procurement_plan using(iup_code) join contract_has_purchase_order using(po_code) join contract on contract_has_purchase_order.contract_code=contract.contract_code and contract.item_code=outbound.item_code
		group by item_code ,DATE_FORMAT(shipping_date, '%Y-%m-%d'),출고단가) t2 
      on t1.일자=t2.일자 and t1.item_code=t2.item_code) t1
      join (select * from item join sub_category using(sc_code) join major_category using(mc_code)) t2 using(item_code)) t1

		]]>
			      where 일자 = DATE_FORMAT(#{startDate}, '%Y-%m-%d')
			      
			      <if test="category != null and category != '' and word != null and word != ''">
			      	<choose>
	    				<when test = 'category == "name"'>
	    					and (item_name like concat('%',#{word},'%'))
	    				</when>
	    				<when test = 'category == "mc"'>
	    					and (mc_name like concat('%',#{word},'%'))
	    				</when>
	    				<when test = 'category == "sc"'>
	    					and (sc_name like concat('%',#{word},'%'))
	    				</when>
	    				<when test = 'category == "std"'>
	    					and (standard like concat('%',#{word},'%'))
	    				</when>
	    				<when test = 'category == "mat"'>
	    					and (material like concat('%',#{word},'%'))
	    				</when>
	    			 </choose>
	    			</if>
			      
     group by 일자, item_code, item_name, standard, material, mc_name,sc_name,inbound_amount,outbound_amount,stock_amount,stock_price
    </select>
    
    
	<!-- 재고금액현황관리리스트 -->    
	
	    <select id="chartItemCategory" resultType="com.overc1ock.domain.ReportVO">
	select 
		    			<choose>
		    				<when test = 'category == "L"'>
		    					mc_name
		    				</when>
		    				<when test = 'category == "M"'>
		    					sc_name
		    				</when>
		    				<when test = 'category == "S"'>
		    					item_name
		    				</when>
		    			</choose>
	 mylabel, 
	    	<![CDATA[
	sum(ifnull(재고금액,0)) myvalue from
	(select t1.일자, t1.item_code, item_name, 재고금액, mc_code, mc_name, sc_code, sc_name from (select * from (select 일자, t1.item_code, item_name,입고총액-출고총액 재고금액, mc_code, mc_name, sc_code, sc_name from (select * from (select t1.일자, t1.item_code,입고량, 입고단가, 출고량,출고단가, sum(ifnull(입고량,0)-ifnull(출고량,0)) over (partition by item_code order by 일자) as 재고량, sum(ifnull(입고단가*입고량,0)) over(partition by item_code order by 일자) 입고총액, sum(ifnull(출고단가*출고량,0)) over(partition by item_code order by 일자) 출고총액
from (select t1.일자 as 일자, t1.item_code as item_code, sum(입고량) 입고량, 입고단가 from (select *
	from (WITH RECURSIVE CTE  AS (
      SELECT DATE_FORMAT('20230101', '%Y-%m-%d') AS DT FROM DUAL
      UNION ALL
      SELECT DATE_ADD(DT, INTERVAL 1 DAY) FROM CTE
      WHERE DT < DATE_FORMAT(#{startDate}, '%Y-%m-%d')) SELECT DT AS 일자 FROM CTE) t1,
      (select distinct(item_code) from inbound) t2) t1
      left join (select inbound.item_code, DATE_FORMAT(arrival_date, '%Y-%m-%d') 일자, sum(inbound_quantity) 입고량, supply_price 입고단가 from inbound join contract_has_purchase_order using(po_code) join contract on contract_has_purchase_order.contract_code=contract.contract_code and contract.item_code=inbound.item_code
		group by item_code ,DATE_FORMAT(arrival_date, '%Y-%m-%d'),입고단가) t2 on t1.일자=t2.일자 and t1.item_code=t2.item_code group by item_code,일자,입고단가) t1
      left join (select outbound.item_code, DATE_FORMAT(shipping_date, '%Y-%m-%d') 일자, sum(outbound_quantity) 출고량, supply_price 출고단가 from outbound join procurement_plan using(iup_code) join contract_has_purchase_order using(po_code) join contract on contract_has_purchase_order.contract_code=contract.contract_code and contract.item_code=outbound.item_code
		group by item_code ,DATE_FORMAT(shipping_date, '%Y-%m-%d'),출고단가) t2 
      on t1.일자=t2.일자 and t1.item_code=t2.item_code) t1
where 일자 >= date('2023-06-01')) t1
join item using(item_code) join sub_category using(sc_code) join major_category using(mc_code)) t1) t1
join (select item_code, max(일자) 일자
		from (WITH RECURSIVE CTE  AS (
			  SELECT DATE_FORMAT('20230101', '%Y-%m-%d') AS DT FROM DUAL
			  UNION ALL
			  SELECT DATE_ADD(DT, INTERVAL 1 DAY) FROM CTE
			  WHERE DT < DATE_FORMAT(#{startDate}, '%Y-%m-%d')) SELECT DT AS 일자 FROM CTE) t1,
			  (select distinct(item_code) from inbound union select distinct(item_code) from outbound) t2
group by item_code) t2
on t1.item_code=t2.item_code and t1.일자 = t2.일자) t1
			]]>
			
	group by 
		    			<choose>
		    				<when test = 'category == "L"'>
		    					mc_name
		    				</when>
		    				<when test = 'category == "M"'>
		    					sc_name
		    				</when>
		    				<when test = 'category == "S"'>
		    					item_name
		    				</when>
		    			</choose>
		    			
			<if test="num != null and num != ''">
			  <![CDATA[
		    	having sum(ifnull(재고금액,0))>= #{num}
		    	]]>
			</if>
			
	order by 
		    			<choose>
		    				<when test = 'category == "L"'>
		    					mc_name
		    				</when>
		    				<when test = 'category == "M"'>
		    					sc_name
		    				</when>
		    				<when test = 'category == "S"'>
		    					item_name
		    				</when>
		    			</choose>
	    </select>
	    
	    
	    <select id="chartDate" resultType="com.overc1ock.domain.ReportVO">
	        	<![CDATA[
select 일자 mylabel, sum(ifnull(입고총액-출고총액,0)) myvalue
					from (select t1.일자, t1.item_code,입고량, 입고단가, 출고량,출고단가, sum(ifnull(입고량,0)-ifnull(출고량,0)) over (partition by item_code order by 일자) as 재고량, sum(ifnull(입고단가*입고량,0)) over(partition by item_code order by 일자) 입고총액, sum(ifnull(출고단가*출고량,0)) over(partition by item_code order by 일자) 출고총액
from (select t1.일자 as 일자, t1.item_code as item_code, sum(입고량) 입고량, 입고단가 from (select *
	from (WITH RECURSIVE CTE  AS (
      SELECT DATE_FORMAT('20230101', '%Y-%m-%d') AS DT FROM DUAL
      UNION ALL
      SELECT DATE_ADD(DT, INTERVAL 1 DAY) FROM CTE
      WHERE DT < last_day(date(#{startDate}))) SELECT DT AS 일자 FROM CTE) t1,
      (select distinct(item_code) from inbound) t2) t1
      left join (select inbound.item_code, DATE_FORMAT(arrival_date, '%Y-%m-%d') 일자, sum(inbound_quantity) 입고량, supply_price 입고단가 from inbound join contract_has_purchase_order using(po_code) join contract on contract_has_purchase_order.contract_code=contract.contract_code and contract.item_code=inbound.item_code
		group by item_code ,DATE_FORMAT(arrival_date, '%Y-%m-%d'),입고단가) t2 on t1.일자=t2.일자 and t1.item_code=t2.item_code group by item_code,일자,입고단가) t1
      left join (select outbound.item_code, DATE_FORMAT(shipping_date, '%Y-%m-%d') 일자, sum(outbound_quantity) 출고량, supply_price 출고단가 from outbound join procurement_plan using(iup_code) join contract_has_purchase_order using(po_code) join contract on contract_has_purchase_order.contract_code=contract.contract_code and contract.item_code=outbound.item_code
		group by item_code ,DATE_FORMAT(shipping_date, '%Y-%m-%d'),출고단가) t2 
      on t1.일자=t2.일자 and t1.item_code=t2.item_code) t1
				          where 일자 >= date(#{startDate})
				          group by 일자
				          order by 일자
	          		]]>
	    </select>



 
    
</mapper>